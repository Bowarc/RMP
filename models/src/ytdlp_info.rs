#![allow(non_snake_case, non_camel_case_types, clippy::large_enum_variant)]
use serde::{Serialize, Deserialize};

/*
    Youtube uses non-standard layout for their pages and im sick of it

    So everything is removed in case the data is missing

    Another way i could do that is directly ffprob-ing the output from yt-dlp
    But idk, i might need more info later
*/

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Aa {
//     pub ext: String,
//     pub impersonate: bool,
//     pub name: String,
//     pub url: String,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct AutomaticCaptions {
//     pub aa: Option<Vec<Aa>>,
//     pub ab: Option<Vec<Aa>>,
//     pub af: Option<Vec<Aa>>,
//     pub ak: Option<Vec<Aa>>,
//     pub am: Option<Vec<Aa>>,
//     pub ar: Option<Vec<Aa>>,
//     #[serde(rename = "as")]
//     pub r#as: Option<Vec<Aa>>,
//     pub ay: Option<Vec<Aa>>,
//     pub az: Option<Vec<Aa>>,
//     pub ba: Option<Vec<Aa>>,
//     pub be: Option<Vec<Aa>>,
//     pub bg: Option<Vec<Aa>>,
//     pub bho: Option<Vec<Aa>>,
//     pub bn: Option<Vec<Aa>>,
//     pub bo: Option<Vec<Aa>>,
//     pub br: Option<Vec<Aa>>,
//     pub bs: Option<Vec<Aa>>,
//     pub ca: Option<Vec<Aa>>,
//     pub ceb: Option<Vec<Aa>>,
//     pub co: Option<Vec<Aa>>,
//     pub crs: Option<Vec<Aa>>,
//     pub cs: Option<Vec<Aa>>,
//     pub cy: Option<Vec<Aa>>,
//     pub da: Option<Vec<Aa>>,
//     pub de: Option<Vec<Aa>>,
//     pub dv: Option<Vec<Aa>>,
//     pub dz: Option<Vec<Aa>>,
//     pub ee: Option<Vec<Aa>>,
//     pub el: Option<Vec<Aa>>,
//     pub en: Option<Vec<Aa>>,
//     #[serde(rename = "en-orig")]
//     pub en_orig: Option<Vec<Aa>>,
//     pub eo: Option<Vec<Aa>>,
//     pub es: Option<Vec<Aa>>,
//     pub et: Option<Vec<Aa>>,
//     pub eu: Option<Vec<Aa>>,
//     pub fa: Option<Vec<Aa>>,
//     pub fi: Option<Vec<Aa>>,
//     pub fil: Option<Vec<Aa>>,
//     pub fj: Option<Vec<Aa>>,
//     pub fo: Option<Vec<Aa>>,
//     pub fr: Option<Vec<Aa>>,
//     pub fy: Option<Vec<Aa>>,
//     pub ga: Option<Vec<Aa>>,
//     pub gaa: Option<Vec<Aa>>,
//     pub gd: Option<Vec<Aa>>,
//     pub gl: Option<Vec<Aa>>,
//     pub gn: Option<Vec<Aa>>,
//     pub gu: Option<Vec<Aa>>,
//     pub gv: Option<Vec<Aa>>,
//     pub ha: Option<Vec<Aa>>,
//     pub haw: Option<Vec<Aa>>,
//     pub hi: Option<Vec<Aa>>,
//     pub hmn: Option<Vec<Aa>>,
//     pub hr: Option<Vec<Aa>>,
//     pub ht: Option<Vec<Aa>>,
//     pub hu: Option<Vec<Aa>>,
//     pub hy: Option<Vec<Aa>>,
//     pub id: Option<Vec<Aa>>,
//     pub ig: Option<Vec<Aa>>,
//     pub is: Option<Vec<Aa>>,
//     pub it: Option<Vec<Aa>>,
//     pub iu: Option<Vec<Aa>>,
//     pub iw: Option<Vec<Aa>>,
//     pub ja: Option<Vec<Aa>>,
//     pub jv: Option<Vec<Aa>>,
//     pub ka: Option<Vec<Aa>>,
//     pub kha: Option<Vec<Aa>>,
//     pub kk: Option<Vec<Aa>>,
//     pub kl: Option<Vec<Aa>>,
//     pub km: Option<Vec<Aa>>,
//     pub kn: Option<Vec<Aa>>,
//     pub ko: Option<Vec<Aa>>,
//     pub kri: Option<Vec<Aa>>,
//     pub ku: Option<Vec<Aa>>,
//     pub ky: Option<Vec<Aa>>,
//     pub la: Option<Vec<Aa>>,
//     pub lb: Option<Vec<Aa>>,
//     pub lg: Option<Vec<Aa>>,
//     pub ln: Option<Vec<Aa>>,
//     pub lo: Option<Vec<Aa>>,
//     pub lt: Option<Vec<Aa>>,
//     pub lua: Option<Vec<Aa>>,
//     pub luo: Option<Vec<Aa>>,
//     pub lv: Option<Vec<Aa>>,
//     pub mfe: Option<Vec<Aa>>,
//     pub mg: Option<Vec<Aa>>,
//     pub mi: Option<Vec<Aa>>,
//     pub mk: Option<Vec<Aa>>,
//     pub ml: Option<Vec<Aa>>,
//     pub mn: Option<Vec<Aa>>,
//     pub mr: Option<Vec<Aa>>,
//     pub ms: Option<Vec<Aa>>,
//     pub mt: Option<Vec<Aa>>,
//     pub my: Option<Vec<Aa>>,
//     pub ne: Option<Vec<Aa>>,
//     pub new: Option<Vec<Aa>>,
//     pub nl: Option<Vec<Aa>>,
//     pub no: Option<Vec<Aa>>,
//     pub nso: Option<Vec<Aa>>,
//     pub ny: Option<Vec<Aa>>,
//     pub oc: Option<Vec<Aa>>,
//     pub om: Option<Vec<Aa>>,
//     pub or: Option<Vec<Aa>>,
//     pub os: Option<Vec<Aa>>,
//     pub pa: Option<Vec<Aa>>,
//     pub pam: Option<Vec<Aa>>,
//     pub pl: Option<Vec<Aa>>,
//     pub ps: Option<Vec<Aa>>,
//     pub pt: Option<Vec<Aa>>,
//     #[serde(rename = "pt-PT")]
//     pub pt_pt: Option<Vec<Aa>>,
//     pub qu: Option<Vec<Aa>>,
//     pub rn: Option<Vec<Aa>>,
//     pub ro: Option<Vec<Aa>>,
//     pub ru: Option<Vec<Aa>>,
//     pub rw: Option<Vec<Aa>>,
//     pub sa: Option<Vec<Aa>>,
//     pub sd: Option<Vec<Aa>>,
//     pub sg: Option<Vec<Aa>>,
//     pub si: Option<Vec<Aa>>,
//     pub sk: Option<Vec<Aa>>,
//     pub sl: Option<Vec<Aa>>,
//     pub sm: Option<Vec<Aa>>,
//     pub sn: Option<Vec<Aa>>,
//     pub so: Option<Vec<Aa>>,
//     pub sq: Option<Vec<Aa>>,
//     pub sr: Option<Vec<Aa>>,
//     pub ss: Option<Vec<Aa>>,
//     pub st: Option<Vec<Aa>>,
//     pub su: Option<Vec<Aa>>,
//     pub sv: Option<Vec<Aa>>,
//     pub sw: Option<Vec<Aa>>,
//     pub ta: Option<Vec<Aa>>,
//     pub te: Option<Vec<Aa>>,
//     pub tg: Option<Vec<Aa>>,
//     pub th: Option<Vec<Aa>>,
//     pub ti: Option<Vec<Aa>>,
//     pub tk: Option<Vec<Aa>>,
//     pub tn: Option<Vec<Aa>>,
//     pub to: Option<Vec<Aa>>,
//     pub tr: Option<Vec<Aa>>,
//     pub ts: Option<Vec<Aa>>,
//     pub tt: Option<Vec<Aa>>,
//     pub tum: Option<Vec<Aa>>,
//     pub ug: Option<Vec<Aa>>,
//     pub uk: Option<Vec<Aa>>,
//     pub ur: Option<Vec<Aa>>,
//     pub uz: Option<Vec<Aa>>,
//     pub ve: Option<Vec<Aa>>,
//     pub vi: Option<Vec<Aa>>,
//     pub war: Option<Vec<Aa>>,
//     pub wo: Option<Vec<Aa>>,
//     pub xh: Option<Vec<Aa>>,
//     pub yi: Option<Vec<Aa>>,
//     pub yo: Option<Vec<Aa>>,
//     #[serde(rename = "zh-Hans")]
//     pub zh_hans: Option<Vec<Aa>>,
//     #[serde(rename = "zh-Hant")]
//     pub zh_hant: Option<Vec<Aa>>,
//     pub zu: Option<Vec<Aa>>,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct DownloaderOptions {
//     pub http_chunk_size: f64,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Formats {
//     pub abr: f64,
//     pub acodec: String,
//     pub aspect_ratio: f64,
//     pub audio_ext: String,
//     pub columns: f64,
//     pub ext: String,
//     pub format: String,
//     pub format_id: String,
//     pub format_note: String,
//     pub fps: f64,
//     pub fragments: Vec<Fragments>,
//     pub height: f64,
//     pub http_headers: HttpHeaders,
//     pub protocol: String,
//     pub resolution: String,
//     pub rows: f64,
//     pub url: String,
//     pub vbr: f64,
//     pub vcodec: String,
//     pub video_ext: String,
//     pub width: f64,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Formats1 {
//     pub audio_ext: String,
//     pub ext: String,
//     pub format: String,
//     pub format_id: String,
//     pub format_note: String,
//     pub has_drm: bool,
//     pub http_headers: HttpHeaders,
//     pub language: String,
//     pub manifest_url: String,
//     pub protocol: String,
//     pub quality: f64,
//     pub resolution: String,
//     pub source_preference: f64,
//     pub url: String,
//     pub vbr: f64,
//     pub vcodec: String,
//     pub video_ext: String,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Formats2 {
//     pub abr: f64,
//     pub acodec: String,
//     pub asr: f64,
//     pub audio_channels: f64,
//     pub audio_ext: String,
//     pub container: String,
//     pub downloader_options: DownloaderOptions,
//     pub ext: String,
//     pub filesize: f64,
//     pub filesize_approx: f64,
//     pub format: String,
//     pub format_id: String,
//     pub format_note: String,
//     pub has_drm: bool,
//     pub http_headers: HttpHeaders,
//     pub language: String,
//     pub language_preference: f64,
//     pub protocol: String,
//     pub quality: f64,
//     pub resolution: String,
//     pub source_preference: f64,
//     pub tbr: f64,
//     pub url: String,
//     pub vbr: f64,
//     pub vcodec: String,
//     pub video_ext: String,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Formats3 {
//     pub abr: f64,
//     pub acodec: String,
//     pub aspect_ratio: f64,
//     pub audio_ext: String,
//     pub dynamic_range: String,
//     pub ext: String,
//     pub format: String,
//     pub format_id: String,
//     pub fps: f64,
//     pub has_drm: bool,
//     pub height: f64,
//     pub http_headers: HttpHeaders,
//     pub manifest_url: String,
//     pub protocol: String,
//     pub quality: f64,
//     pub resolution: String,
//     pub source_preference: f64,
//     pub tbr: f64,
//     pub url: String,
//     pub vbr: f64,
//     pub vcodec: String,
//     pub video_ext: String,
//     pub width: f64,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Formats4 {
//     pub abr: f64,
//     pub acodec: String,
//     pub aspect_ratio: f64,
//     pub audio_ext: String,
//     pub container: String,
//     pub downloader_options: DownloaderOptions,
//     pub dynamic_range: String,
//     pub ext: String,
//     pub filesize: f64,
//     pub filesize_approx: f64,
//     pub format: String,
//     pub format_id: String,
//     pub format_note: String,
//     pub fps: f64,
//     pub has_drm: bool,
//     pub height: f64,
//     pub http_headers: HttpHeaders,
//     pub language_preference: f64,
//     pub protocol: String,
//     pub quality: f64,
//     pub resolution: String,
//     pub source_preference: f64,
//     pub tbr: f64,
//     pub url: String,
//     pub vbr: f64,
//     pub vcodec: String,
//     pub video_ext: String,
//     pub width: f64,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Formats5 {
//     pub acodec: String,
//     pub aspect_ratio: f64,
//     pub asr: f64,
//     pub audio_channels: f64,
//     pub audio_ext: String,
//     pub downloader_options: DownloaderOptions,
//     pub dynamic_range: String,
//     pub ext: String,
//     pub filesize: f64,
//     pub filesize_approx: f64,
//     pub format: String,
//     pub format_id: String,
//     pub format_note: String,
//     pub fps: f64,
//     pub has_drm: bool,
//     pub height: f64,
//     pub http_headers: HttpHeaders,
//     pub language: String,
//     pub language_preference: f64,
//     pub protocol: String,
//     pub quality: f64,
//     pub resolution: String,
//     pub source_preference: f64,
//     pub tbr: f64,
//     pub url: String,
//     pub vcodec: String,
//     pub video_ext: String,
//     pub width: f64,
// }

// #[derive(Serialize, Deserialize, Debug)]
// #[serde(untagged)]
// pub enum FormatsEnum {
//     Variant1(Formats4),
//     Variant2(Formats5),
//     Variant3(Formats),
//     Variant4(Formats1),
//     Variant5(Formats2),
//     Variant6(Formats3),
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Fragments {
//     pub duration: f64,
//     pub url: String,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct HttpHeaders {
//     #[serde(rename = "Accept")]
//     pub accept: String,
//     #[serde(rename = "Accept-Language")]
//     pub accept_language: String,
//     #[serde(rename = "Sec-Fetch-Mode")]
//     pub sec_fetch_mode: String,
//     #[serde(rename = "User-Agent")]
//     pub user_agent: String,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Subtitles {
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Thumbnails {
//     pub id: String,
//     pub preference: f64,
//     pub url: String,
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Thumbnails1 {
//     pub height: f64,
//     pub id: String,
//     pub preference: f64,
//     pub resolution: String,
//     pub url: String,
//     pub width: f64,
// }

// #[derive(Serialize, Deserialize, Debug)]
// #[serde(untagged)]
// pub enum ThumbnailsEnum {
//     Variant1(Thumbnails),
//     Variant2(Thumbnails1),
// }

// #[derive(Serialize, Deserialize, Debug)]
// pub struct Version {
//     pub release_git_head: String,
//     pub repository: String,
//     pub version: String,
// }

#[derive(Serialize, Deserialize, Debug)]
pub struct YtdlpInfo {
    // pub _format_sort_fields: Vec<String>,
    // pub _type: String,
    // pub _version: Version,
    // pub abr: f64,
    // pub acodec: String,
    // pub age_limit: f64,
    // pub asr: f64,
    // pub audio_channels: f64,
    // pub audio_ext: String,
    // pub automatic_captions: AutomaticCaptions,
    // pub availability: String,
    // pub categories: Vec<String>,
    // pub channel: String,
    // pub channel_follower_count: f64,
    // pub channel_id: String,
    // pub channel_url: String,
    // pub comment_count: f64,
    // pub container: String,
    // pub description: String,
    // pub display_id: String,
    // pub downloader_options: DownloaderOptions,
    pub duration: f64,
    // pub duration_string: String,
    // pub epoch: f64,
    // pub ext: String,
    // pub extractor: String,
    // pub extractor_key: String,
    // pub filesize: f64,
    // pub filesize_approx: f64,
    // pub format: String,
    // pub format_id: String,
    // pub format_note: String,
    // pub formats: Vec<FormatsEnum>,
    // pub fulltitle: String,
    // pub has_drm: bool,
    // pub http_headers: HttpHeaders,
    // pub id: String,
    // pub is_live: bool,
    // pub language: String,
    // pub language_preference: f64,
    // pub like_count: f64,
    // pub live_status: String,
    // pub media_type: String,
    // pub playable_in_embed: bool,
    // pub protocol: String,
    // pub quality: f64,
    // pub resolution: String,
    // pub source_preference: f64,
    // pub subtitles: Subtitles,
    // pub tags: Vec<String>,
    // pub tbr: f64,
    // pub thumbnail: String,
    // pub thumbnails: Vec<ThumbnailsEnum>,
    // pub timestamp: f64,
    pub title: String,
    // pub upload_date: String,
    // pub uploader: String,
    // pub uploader_id: String,
    // pub uploader_url: String,
    // pub url: String,
    // pub vbr: f64,
    // pub vcodec: String,
    // pub video_ext: String,
    // pub view_count: f64,
    // pub was_live: bool,
    // pub webpage_url: String,
    // pub webpage_url_basename: String,
    // pub webpage_url_domain: String,
}

